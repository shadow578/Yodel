# FULL CI is currently disabled as there are no tests in androidTest (thanks to robolectric)
# if you need instrumented tests, uncomment '- main' here and comment it in short_ci

# Action to automatically (and magically) run unit and instrumentation tests on the project
# and publish the results as a comment on the PR
# main action used to make this work are:
# - eskatos/gradle-command-action@v1
# - reactivecircus/android-emulator-runner@v2
# - EnricoMi/publish-unit-test-result-action@v1

name: CI (Unit + Instrumentation Tests)
on:
  # run on pull request to main (release) & develop (feature merge)
  #pull_request:
  #  branches:
      #- main
      #- develop

  # and manual run
  workflow_dispatch:
jobs:
  # run unit tests
  unit_test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      JAVA_TOOL_OPTIONS: -Xmx5g -XX:+UseParallelGC
    steps:
      # setup env
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - run: |
          mkdir -p ~/.gradle
          cp .github/gh-gradle.properties ~/.gradle/gradle.properties
          chmod +x ./gradlew

      # run gradle unit test task
      - name: Run unit tests
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: testDebugUnitTest
          wrapper-cache-enabled: true
          dependencies-cache-enabled: true
          configuration-cache-enabled: true

      # print contents of artifact dir
      - run: ls ./app/build/test-results/testDebugUnitTest

      # upload results
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: unit-test-results
          path: ./app/build/test-results/testDebugUnitTest/*.xml
  
  # run instrumentation test
  instrumentation_test:
    name: Instrumentation Tests
    needs: unit_test
    runs-on: macos-latest
    timeout-minutes: 20
    env:
      JAVA_TOOL_OPTIONS: -Xmx5g -XX:+UseParallelGC
    strategy:
      fail-fast: true
      matrix:
        # keep this list short, with only key versions in it
        # the instrumentation tests run on macOS, which consumes 10x the minutes a linux job would
        # making these test rather costly
        api-level: [23, 26, 30]
    steps:
      # setup env
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - run: |
          mkdir -p ~/.gradle
          cp .github/gh-gradle.properties ~/.gradle/gradle.properties
          chmod +x ./gradlew

      # get avd target (API 30+ only has google api images)
      - name: Get AVD Target
        id: avd-target
        run: echo "::set-output name=target::$(if [ ${{ matrix.api-level }} -ge 30 ]; then echo google_apis; else echo default; fi)"

      # setup caches (this is based on the example given at https://github.com/marketplace/actions/android-emulator-runner#usage)
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      # generate avd for cache
      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ steps.avd-target.outputs.target }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      # run tests
      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ steps.avd-target.outputs.target }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck

      # print contents of artifact dir
      - run: ls ./app/build/outputs/androidTest-results/connected

      # upload results
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: instrumentation-test-results
          path: ./app/build/outputs/androidTest-results/connected/*.xml
  
  # publish test results (even if tests failed)
  publish_results:
    name: Publish Test Results
    needs: [unit_test, instrumentation_test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      # download unit test results
      - run: mkdir ./results/
      - name: Download Unit Test Results
        uses: actions/download-artifact@v2
        with:
          name: unit-test-results
          path: ./results/

      # print contents of artifact dir
      - run: ls ./results

      # download instrumentation test results
      - name: Download Instrumentation Test Results
        uses: actions/download-artifact@v2
        with:
          name: instrumentation-test-results
          path: ./results/

      # print contents of artifact dir
      - run: ls ./results

      # publish results
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: Test Results (Instrumented + Unit Tests)
          report_individual_runs: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./results/*.xml
